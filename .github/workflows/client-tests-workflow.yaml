name: Client Tests Workflow

# When this workflow is activated
on: 
  pull_request:

jobs:
  # Job 1: Preparation and cleanup
  prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clean npm state and fix optional dependencies
        run: |
          rm -rf node_modules
          rm -rf package-lock.json
          cd ./app/frontend
          rm -rf node_modules
          rm -rf package-lock.json
          cd ../backend
          rm -rf node_modules
          rm -rf package-lock.json
          cd ../..
          npm cache clean --force

      - name: Install root dependencies
        run: npm install --force

      - name: Install frontend dependencies with rollup fix
        run: |
          cd ./app/frontend
          npm install --force
          # Explicitly install the missing rollup binary for linux
          npm install @rollup/rollup-linux-x64-gnu --save-dev --force || true

      - name: Install backend dependencies
        run: |
          cd ./app/backend
          npm install --force

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            app/frontend/node_modules
            app/backend/node_modules
          key: ${{ runner.os }}-npm-node20-${{ hashFiles('package-lock.json', 'app/frontend/package-lock.json', 'app/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-node20-

  # Job 2: Frontend tests
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            app/frontend/node_modules
            app/backend/node_modules
          key: ${{ runner.os }}-npm-node20-${{ hashFiles('package-lock.json', 'app/frontend/package-lock.json', 'app/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-node20-

      - name: Install dependencies if cache miss
        run: |
          if [ ! -d "node_modules" ]; then 
            npm install --force
          fi
          cd ./app/frontend
          if [ ! -d "node_modules" ]; then 
            npm install --force
            # Ensure rollup binary is available
            npm install @rollup/rollup-linux-x64-gnu --save-dev --force || true
          fi

      - name: Run frontend tests
        run: |
          cd ./app/frontend
          npm run test

  # Job 3: Backend tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: prepare

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            app/frontend/node_modules
            app/backend/node_modules
          key: ${{ runner.os }}-npm-node20-${{ hashFiles('package-lock.json', 'app/frontend/package-lock.json', 'app/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-node20-

      - name: Install dependencies if cache miss
        run: |
          if [ ! -d "node_modules" ]; then 
            npm install --force
          fi
          cd ./app/backend
          if [ ! -d "node_modules" ]; then 
            npm install --force
          fi
      - name: Run backend tests with PostgreSQL
        run: |
          cd app/backend
          docker rm --force pgtest || true
          docker run -d -p 5434:5432 --name pgtest \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=secret \
            -e POSTGRES_DB=ask_and_trust_test \
            postgres
          POSTGRES_PORT=5434 \
          POSTGRES_HOST=localhost \
          POSTGRES_USER=postgres \
          POSTGRES_PASSWORD=secret \
          JWT_SECRET_KEY=supersecret \
          NODE_ENV=testing \
          npx jest
          docker rm --force pgtest

